#!/sbin/openrc-run
# Copyright 1999-2018 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2

CHROOT=${SVCNAME#*.}
TMPDIR="/tmp/chroot-mount/${CHROOT}"


depend() {
	need localmount
	need bootmisc
}

start() {
	if [ ${SVCNAME} = "mount-chroot" ]; then
		eerror "You must not call mount-chroot directly."
		eerror "Create a symlink pointing to the service name (chroot-mount.name)"
		return 1
	fi
	if [ "${CHROOT_PATH}" = "" ]; then
		eerror "You must set the variable CHROOT_PATH in the config file"
		return 1
	fi

	local eroot="$(portageq envvar EROOT)"

	[[ "${CHROOT_DISTDIR}" = "" ]] && CHROOT_DISTDIR="/usr/portage/distfiles"
	[[ "${CHROOT_PKGDIR}" = "" ]]  && CHROOT_PKGDIR="/usr/portage/packages"
	[[ "${CHROOT_REPOS_DIR}" = "" ]] && CHROOT_PORTDIR="/var/db/repos"


	ebegin "Mounting chroot directories"
	mount --rbind /dev "${CHROOT_PATH}"/dev > /dev/null &
	mount -t proc none "${CHROOT_PATH}"/proc > /dev/null &
	mount --rbind /sys "${CHROOT_PATH}"/sys > /dev/null &

	mkdir -p "${TMPDIR}" || die "Could not create tmp dir ${TMPDIR}"
	mount --rbind "${TMPDIR}" "${CHROOT_PATH}"/tmp > /dev/null &

	cp -L /etc/resolv.conf "${CHROOT_PATH}/etc/resolv.conf"

	if [[ "$MOUNT_REPOS" != "" ]]; then
		local reponame repodir chrootrepodir rwmountopt
		for repo in $MOUNT_REPOS
		do
			reponame=$(echo $repo|cut -d: -f1)
			repodir="$(portageq get_repo_path ${eroot} ${reponame})"

			# Bind mount to specified dir or into default repos directory
			chrootrepodir=${CHROOT_REPOS_DIR}/${reponame}
			[[ $(echo $repo|grep ':'|wc -l) -gt 0 ]] && chrootrepodir=$(echo $repo|cut -d: -f2)

			mkdir -p "${CHROOT_PATH}${chrootrepodir}" || die "Could not create directory for repository ${reponame}"

			rwmountopt="-r"
			[[ "$MOUNT_PORTAGE_RW" -eq 1 ]] && rwmountopt="-w"

			# rbind is needed to mount potential nfs shared portage dir from host
			mount --rbind "${rwmountopt}" "${repodir}" "${CHROOT_PATH%/}${chrootrepodir}" > /dev/null &
		done
	fi

	if [[ "${MOUNT_DISTDIR}" -eq 1 ]]; then
		local distdir="$(portageq envvar DISTDIR)"
		mkdir -p "${CHROOT_PATH}${CHROOT_DISTDIR}" || die "Could not create portage distfiles dir"

		local rwmountopt="-r"
		[[ "$MOUNT_DISTDIR_RW" -eq 1 ]] && rwmountopt="-w"

		# rbind is needed to mount potential nfs shared portage dir from host
		mount --rbind "${rwmountopt}" "${distdir}" "${CHROOT_PATH%/}${CHROOT_DISTDIR}" > /dev/null &
	fi
	if [[ "${MOUNT_PKGDIR}" -eq 1 ]]; then
		local pkgdir="$(portageq envvar PKGDIR)"
		mkdir -p "${CHROOT_PATH%/}${CHROOT_PKGDIR}" || die

		local rwmountopt="-r"
		[[ "$MOUNT_PKGDIR_RW" -eq 1 ]] && rwmountopt="-w"

		# rbind is needed to mount potential nfs shared portage dir from host
		mount --rbind "${rwmountopt}" "${pkgdir}" "${CHROOT_PATH%/}${CHROOT_PKGDIR}" > /dev/null &
	fi

	eend $? "An error occurred while mounting chroot directories"
}

stop() {
	ebegin "Unmounting chroot directories"

	# umount may need time for recursive operations and the others might fail
	# if the previous didnt succeed (/dev/tmpfs for example)
	rm -rf "${CHROOT_PATH}"/tmp/*
	umount -Rf "${CHROOT_PATH}"/tmp > /dev/null
	umount -Rf "${CHROOT_PATH}"/dev > /dev/null
	umount -Rf "${CHROOT_PATH}"/proc > /dev/null
	umount -Rf "${CHROOT_PATH}"/sys > /dev/null

	while [ $(grep -- "${CHROOT_PATH}" /proc/self/mountinfo | wc -l) -gt 0 ]; do
		umount -Rf "$(grep -- ${CHROOT_PATH} /proc/self/mountinfo|head -n1|cut -d' ' -f5)"> /dev/null
	done

	eend $? "An error occurred while unmounting chroot directories"
}
